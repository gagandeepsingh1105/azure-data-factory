{
	"name": "first_dfl",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_csv",
						"type": "DatasetReference"
					},
					"name": "superstoredata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "calculateprofit"
				},
				{
					"name": "droploss"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Row ID} as short,",
				"          {Order ID} as string,",
				"          {Order Date} as date,",
				"          {Ship Date} as date,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          Country as string,",
				"          City as string,",
				"          State as string,",
				"          {Postal Code} as integer,",
				"          Region as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as double,",
				"          Profit as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> superstoredata",
				"droploss aggregate(groupBy(Category),",
				"     total_profit = sum(Profit)) ~> calculateprofit",
				"superstoredata filter(Profit > 0) ~> droploss",
				"calculateprofit sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['aggregate-data.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}